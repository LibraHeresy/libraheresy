import{_ as s,c as a,o as n,V as o}from"./chunks/framework.0cefc241.js";const d=JSON.parse('{"title":"如何搭建 Electron 项目","description":"","frontmatter":{},"headers":[],"relativePath":"blog/如何搭建Electron项目.md","lastUpdated":1685459160000}'),l={name:"blog/如何搭建Electron项目.md"},p=o(`<h1 id="如何搭建-electron-项目" tabindex="-1">如何搭建 Electron 项目 <a class="header-anchor" href="#如何搭建-electron-项目" aria-label="Permalink to &quot;如何搭建 Electron 项目&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>前段时间帮一个不是程序员的朋友搭建了属于自己的博客，但是他不会 <code>Github</code> 和 <code>VS Code</code>，这就让更新博客成为一件麻烦事。</p><p>又因为朋友的特殊使用习惯，单纯使用网页更新的话，安全性得不到保障，而且不能初始化和自定义设置。因为我没服务器，无法搭建 <code>http</code> 服务和数据库。</p><p>思考了一段时间，突然想起我是个前端啊，那用 <code>Electron</code> 直接写个桌面应用不就行了。敏感数据直接保存到本地，也不用担心安全问题，还省了服务器的费用（这是重点）。</p><p><a href="https://www.electronjs.org/zh/docs/latest/" target="_blank" rel="noreferrer">Electron 官方文档</a></p><p><a href="https://github.com/vuejs/create-vue" target="_blank" rel="noreferrer">create-vue 文档</a></p><h2 id="环境" tabindex="-1">环境 <a class="header-anchor" href="#环境" aria-label="Permalink to &quot;环境&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>node: 18.16.0</p><p>npm: 9.5.1</p><p>electron: 24.2.0</p><p>vite: 4.3.2</p><p>vue: 3.2.47</p></div><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><p>初上手 <code>Electron</code>，目录结构犯了难，是把 <code>Vue</code> 项目直接放在 <code>Electron</code> 项目内好呢，还是分开好一些。</p><p>在网上搜了一下最佳实践，好像都有。</p><p>偶然间在知乎看见一个大佬解释 <code>Electron</code> 项目，“其实把 <code>Electron</code> 想象成在本地部署运行的 <code>node</code> 服务和 <code>Vue</code> 项目就行了，不要过多思考 <code>Electron</code> 的定位”。</p><p>这一下茅塞顿开，决定将 <code>Vue</code> 和 <code>Electron</code> 分别存放开发。</p><p>这样以后将页面单独剥离，作为 <code>web</code> 项目开发，也不会有什么阻碍。</p><h3 id="初始化-electron-项目和-vue-项目" tabindex="-1">初始化 <code>Electron</code> 项目和 <code>Vue</code> 项目 <a class="header-anchor" href="#初始化-electron-项目和-vue-项目" aria-label="Permalink to &quot;初始化 \`Electron\` 项目和 \`Vue\` 项目&quot;">​</a></h3><p>Electron 项目推荐跟着 <a href="https://www.electronjs.org/zh/docs/latest/tutorial/quick-start" target="_blank" rel="noreferrer">Electron 快速入门</a> 来搭建，简单易上手。</p><p>Vue 项目推荐使用 <a href="https://github.com/vuejs/create-vue" target="_blank" rel="noreferrer">create-vue</a> 脚手架来搭建，也是简单易上手，毕竟我们的目标是快速开发应用。</p><h3 id="整合-electron-和-vue" tabindex="-1">整合 <code>Electron</code> 和 <code>Vue</code> <a class="header-anchor" href="#整合-electron-和-vue" aria-label="Permalink to &quot;整合 \`Electron\` 和 \`Vue\`&quot;">​</a></h3><p>当两个项目初始化成功，那接下来的最大问题就是，如何同步开发与打包。</p><h4 id="同步开发" tabindex="-1">同步开发 <a class="header-anchor" href="#同步开发" aria-label="Permalink to &quot;同步开发&quot;">​</a></h4><p>练习了 <a href="https://www.electronjs.org/zh/docs/latest/tutorial/quick-start" target="_blank" rel="noreferrer">Electron 快速入门</a> 的人，自然会记得创建窗口的 <code>createWindow</code> 方法内，<code>win</code> 对象调用的 <code>loadFile</code> 方法，它的入参是一个地址。</p><p>而我们本地运行的 <code>Vue</code> 项目也提供了一个本地地址，<code>http://localhost:5173/</code>。</p><p>没错，我们可以直接把这个地址作为入参传入 <code>loadFile</code> 方法，实现同步开发，不用在每次 <code>Vue</code> 更新代码后重新打包。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> createWindow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">win</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    width</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">800</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    height</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">600</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">win</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost:5173/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h4 id="同步打包" tabindex="-1">同步打包 <a class="header-anchor" href="#同步打包" aria-label="Permalink to &quot;同步打包&quot;">​</a></h4><p>开发的时候，可以使用本地地址，那打包的时候就不行了呀。<code>Electron</code> 项目是需要使用入口文件 <code>index.html</code> 的，如果 <code>Vue</code> 项目在项目文件夹内打包，<code>Electron</code> 项目肯定是引用不到的，那该如何解决这个问题呢？</p><p>也很简单，直接修改 <code>Vite</code> 的配置文件，将输出路径改为 <code>Electron</code> 的根目录。之所以是根目录，是因为放在别的路径下，<code>Electron</code> 并不能很好的识别到依赖文件并进行打包，当然也可能是因为我还没有完全了解 <code>Electron</code> 的配置。</p><p>网上有推荐 <code>electron-builder</code> 插件包，来实现打包操作，但根据我的使用体验，<code>electron-forge</code>，这个官方的打包插件已经能满足我的需要了。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>vue-app/vite.config.ts</p></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> vue </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@vitejs/plugin-vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// https://vitejs.dev/config/</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">base</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">outDir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../electron-app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">emptyOutDir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 这个很重要，别把Electron项目文件夹给清空了</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#82AAFF;">vue</span><span style="color:#A6ACCD;">()]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> NODE_ENV </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">production</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">loadFile</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">./index.html</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">development</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">loadFile</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:5173/</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> createWindow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">win</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    width</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">800</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    height</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">600</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">win</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadURL</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">config</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">NODE_ENV</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">loadFile</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">./index.html</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h3 id="编写-package-json-文件" tabindex="-1">编写 <code>package.json</code> 文件 <a class="header-anchor" href="#编写-package-json-文件" aria-label="Permalink to &quot;编写 \`package.json\` 文件&quot;">​</a></h3><p>这个 <code>package.json</code> 文件并不是 <code>Electron</code> 项目或者 <code>Vue</code> 项目的，而是属于包裹着这两个项目的 <code>npm</code> 项目的配置文件。</p><p>我们需要编写安装，运行，打包三个命令。</p><p>大致目录结构如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">─electron-template</span></span>
<span class="line"><span style="color:#A6ACCD;">  ├─electron-app</span></span>
<span class="line"><span style="color:#A6ACCD;">  ├─vue-app</span></span>
<span class="line"><span style="color:#A6ACCD;">  └─package.json</span></span></code></pre></div><h4 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h4><p>没什么好说的，<code>&amp;&amp;</code> 串行执行。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">electron:install</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cd ./electron-app &amp;&amp; yarn install</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">vue:install</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cd ./vue-app &amp;&amp; yarn install</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">all:install</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yarn vue:install &amp;&amp; yarn electron:install</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-label="Permalink to &quot;运行&quot;">​</a></h4><p><code>cross-env</code> 是运行跨平台设置和使用环境变量的脚本，创造一个全局环境变量，主要用来区分开发与生产环境</p><p><code>concurrently</code> 是前端工程化并行解决方案，就是并行运行多条命令</p><p><code>wait-on</code> 是跨平台异步方式调用同步方法插件包，简单理解就是 <code>async</code> 和 <code>await</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">electron:start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wait-on tcp:5173 &amp;&amp; cd ./electron-app &amp;&amp; yarn start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">vue:start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cd ./vue-app &amp;&amp; yarn dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">all:start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cross-env NODE_ENV=development concurrently -k </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">yarn vue:start</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">yarn electron:start</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-label="Permalink to &quot;打包&quot;">​</a></h4><p>看前面的解释 =_=</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">electron:build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cd ./electron-app &amp;&amp; yarn make</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">vue:build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cd ./vue-app &amp;&amp; yarn build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">all:build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cross-env NODE_ENV=production yarn vue:build &amp;&amp; yarn electron:build</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="执行打包命令" tabindex="-1">执行打包命令 <a class="header-anchor" href="#执行打包命令" aria-label="Permalink to &quot;执行打包命令&quot;">​</a></h3><p>在根目录执行<code>all:build</code>打包命令，如果在 <code>Electron</code> 项目根目录下出现 <code>out</code> 文件夹，就代表你打包成功。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">all:build</span></span></code></pre></div><p>打开里面的 <code>exe</code> 文件，如果你能看见以下截图画面，就代表你成功运行了 <code>Electron</code> 项目。</p><p>具体的代码可以到 <a href="https://github.com/LibraHeresy/electron-template" target="_blank" rel="noreferrer">我的仓库</a> 查看。</p><p><img src="https://cdn.jsdelivr.net/gh/LibraHeresy/BaiduNetDisk/blog-images/202305302258179.png" alt="图片" title="图片"></p>`,54),e=[p];function t(c,r,D,F,y,i){return n(),a("div",null,e)}const A=s(l,[["render",t]]);export{d as __pageData,A as default};

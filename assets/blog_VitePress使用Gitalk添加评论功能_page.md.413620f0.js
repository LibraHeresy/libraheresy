import{_ as s,c as a,o as n,V as l}from"./chunks/framework.0cefc241.js";const o="/libraheresy-blog/assets/image6.00776c28.png",p="/libraheresy-blog/assets/image1.0e633915.png",e="/libraheresy-blog/assets/image2.4f8d6346.png",t="/libraheresy-blog/assets/image3.b32dae70.png",c="/libraheresy-blog/assets/image4.71e177b7.png",r="/libraheresy-blog/assets/image5.38f71a15.png",f=JSON.parse('{"title":"VitePress 使用 Gitalk 添加评论功能","description":"","frontmatter":{},"headers":[],"relativePath":"blog/VitePress使用Gitalk添加评论功能/page.md","lastUpdated":1684892162000}'),y={name:"blog/VitePress使用Gitalk添加评论功能/page.md"},F=l('<h1 id="vitepress-使用-gitalk-添加评论功能" tabindex="-1">VitePress 使用 Gitalk 添加评论功能 <a class="header-anchor" href="#vitepress-使用-gitalk-添加评论功能" aria-label="Permalink to &quot;VitePress 使用 Gitalk 添加评论功能&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>一个优质的博客怎么能没有评论功能呢，没有评论怎么和同志们的思想激情 ♂ 碰撞，获得新的收获。</p><p>Ah, That&#39;s good.</p><p>那么用什么方案呢，看来看去，不用自己搭建后端服务的方案都大同小异，都是利用 Github 的 issues 模块实现的。</p><p>其中的佼佼者是 Gitment 和 Gitalk，只可惜这两个库是难兄难弟，基本上都停更了。</p><p>Gitment 最后更新日期为 2018.04.05，Gitalk 最后更新日期为 2022.07.18。</p><p>最后还是确定使用 Gitalk，引用了大神 <a href="https://github.com/lesonky" target="_blank" rel="noreferrer">@lesonky</a> 修改以后的 <a href="https://github.com/lesonky/gitalk" target="_blank" rel="noreferrer">Gitalk</a> 库，参考了博客<a href="https://juejin.cn/post/7146037234527895560" target="_blank" rel="noreferrer">《vitepress 配置评论(gitalk)》</a>。</p><h2 id="环境" tabindex="-1">环境 <a class="header-anchor" href="#环境" aria-label="Permalink to &quot;环境&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">环境</p><p>node: 16.15.1</p><p>Gitalk: 1.7.2</p></div><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><h3 id="注册-oauth" tabindex="-1">注册 OAuth <a class="header-anchor" href="#注册-oauth" aria-label="Permalink to &quot;注册 OAuth&quot;">​</a></h3><ol><li>来到<a href="https://github.com/settings/applications/new" target="_blank" rel="noreferrer">Github Application</a>创建页面</li></ol><p><img src="'+o+'" alt="图片" title="图片"></p><ol start="2"><li>配置参数注册 OAuth</li></ol><p><img src="'+p+'" alt="图片" title="图片"></p><p><img src="'+e+'" alt="图片" title="图片"></p><ol start="3"><li>查看生成的<code>Client ID</code>和<code>Client secrets</code></li></ol><p><img src="'+t+'" alt="图片" title="图片"></p><p><img src="'+c+`" alt="图片" title="图片"></p><h3 id="安装-gitalk" tabindex="-1">安装 Gitalk <a class="header-anchor" href="#安装-gitalk" aria-label="Permalink to &quot;安装 Gitalk&quot;">​</a></h3><p>根据上文博客评论区大神的说法，还是推荐直接从 Github 安装 Gitalk。</p><p>因为我一直安装不成功大神的库，所以我直接 fork 了大神 Gitalk 仓库，把地址改成了自己的仓库地址，你们也可以直接用我的。</p><p>具体配置如下</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">gitalk</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://github.com/LibraHeresy/gitalk.git</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">vitepress</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^1.0.0-alpha.72</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span></code></pre></div><p>然后<code>npm</code>直接安装就行了。</p><h3 id="挂载-gitalk-组件" tabindex="-1">挂载 Gitalk 组件 <a class="header-anchor" href="#挂载-gitalk-组件" aria-label="Permalink to &quot;挂载 Gitalk 组件&quot;">​</a></h3><p>在<code>docs/.vitepress</code>路径下，新建<code>theme</code>文件夹，在该文件夹下新建<code>index.js</code>和<code>MyLayout.vue</code>。</p><h4 id="index-js" tabindex="-1">index.js <a class="header-anchor" href="#index-js" aria-label="Permalink to &quot;index.js&quot;">​</a></h4><p>在<code>index.js</code>文件内导入<code>VitePress</code>默认主题配置，再导入自己写的布局组件，覆盖默认主题对象的<code>Layout</code>属性，最后导出该文件。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> DefaultTheme </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vitepress/theme</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> MyLayout </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./MyLayout.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">DefaultTheme</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">Layout</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> MyLayout</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h4 id="mylayout-vue" tabindex="-1">MyLayout.vue <a class="header-anchor" href="#mylayout-vue" aria-label="Permalink to &quot;MyLayout.vue&quot;">​</a></h4><p>这里和上文的博客说法完全不一样，折腾了很久才知道，VitePress 有一个默认的<code>Layout</code>组件，<code>Layout</code>组件内有负责渲染文本的<code>Content</code>组件，我们需要的只是在<code>Layout</code>组件上挂载一个评论组件而已。</p><p>但是按照博客的写法，不出意外我们只能收获一个只有评论组件的页面，所以就要导入原有的<code>Layout</code>组件，并使用 Vue3 的新写法，直接写一个子组件渲染挂载评论组件到<code>Layout</code>组件上。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Layout</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> DefaultTheme </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vitepress/theme</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> Layout </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> DefaultTheme</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">watch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextTick</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onMounted</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gitalk/dist/gitalk.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Gitalk </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gitalk</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useRouter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vitepress</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> route </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRouter</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 页面路由对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">onMounted</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">watch</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">route</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 监听路由变化，重新挂载评论组件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">nextTick</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">content_div</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.content-container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 查找页面内容DOM节点，此节点只有layout为Page（默认layout属性）的md文档才有</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">content_div</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">before_s_div</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gitalk-page-container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 获取页面评论组件DOM节点</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">before_s_div</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">判断是否已有评论组件节点</span><span style="color:#F07178;">，</span><span style="color:#A6ACCD;">有则删除</span><span style="color:#F07178;">，</span><span style="color:#A6ACCD;">重新创建</span><span style="color:#F07178;">。</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">content_div</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">before_s_div</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s_div</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 创建节点</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">s_div</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gitalk-page-container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 设置id</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">content_div</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">s_div</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// querySelector的节点可自己根据自己想加载的地方设置</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">gitment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Gitalk</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">              id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">route</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 可选，推荐设置为页面标题，因为会作为标签传给Github issues，且issues标签有长度限制。</span></span>
<span class="line"><span style="color:#F07178;">              owner</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">LibraHeresy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// GitHub repository 所有者</span></span>
<span class="line"><span style="color:#F07178;">              repo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vite-press</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// GitHub repository</span></span>
<span class="line"><span style="color:#F07178;">              clientID</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 自己的clientID</span></span>
<span class="line"><span style="color:#F07178;">              clientSecret</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 自己的clientSecret</span></span>
<span class="line"><span style="color:#F07178;">              admin</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">LibraHeresy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// GitHub repository 所有者</span></span>
<span class="line"><span style="color:#F07178;">              labels</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Gitalk</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// GitHub issue 的标签</span></span>
<span class="line"><span style="color:#F07178;">              createIssueManually</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//如果当前页面没有相应的 isssue 且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">gitment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gitalk-page-container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> immediate</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>全部配置好，就可以收获一个有评论功能的博客了。</p><p><img src="`+r+'" alt="图片" title="图片"></p><h2 id="遇到的问题" tabindex="-1">遇到的问题 <a class="header-anchor" href="#遇到的问题" aria-label="Permalink to &quot;遇到的问题&quot;">​</a></h2><h3 id="打包报错-提示找不到-window-和-document-对象" tabindex="-1">打包报错，提示找不到 window 和 document 对象 <a class="header-anchor" href="#打包报错-提示找不到-window-和-document-对象" aria-label="Permalink to &quot;打包报错，提示找不到 window 和 document 对象&quot;">​</a></h3><p>因为在打包的时候，项目处于<code>node</code>环境，当然就没有<code>window</code>和<code>document</code>对象，所以和两个对象有关的方法要放在<code>onMounted</code>生命周期方法内，这是 VitePress 的规则。</p><h3 id="切换首页后评论组件消失" tabindex="-1">切换首页后评论组件消失 <a class="header-anchor" href="#切换首页后评论组件消失" aria-label="Permalink to &quot;切换首页后评论组件消失&quot;">​</a></h3><p>这是因为当你首页设置<code>layout</code>为<code>home</code>时，页面是没有<code>.content-container</code>DOM 节点的，所以评论组件会和<code>.content-container</code>DOM 节点一起被删除。</p><p>而当你切回博客页面时，挂载方法是写在<code>onMounted</code>生命周期方法内，也不会再挂载评论组件了。</p><p>这个时候我们要用<code>watch</code>函数监听路由变化，重新执行挂载方法。</p><h3 id="切换页面评论组件没有刷新" tabindex="-1">切换页面评论组件没有刷新 <a class="header-anchor" href="#切换页面评论组件没有刷新" aria-label="Permalink to &quot;切换页面评论组件没有刷新&quot;">​</a></h3><p>这是因为页面本身没有变化，变得只是<code>Content</code>组件渲染的文本内容而已，原因是<code>Vue</code>的<code>SPA</code>模式。</p><p>所以我们需要手动删除原有的评论组件 DOM 节点，重新挂载一个新的评论组件。</p>',47),D=[F];function i(C,A,d,u,h,m){return n(),a("div",null,D)}const q=s(y,[["render",i]]);export{f as __pageData,q as default};
